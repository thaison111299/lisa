[{"C:\\Users\\son\\Desktop\\lisa\\src\\index.js":"1","C:\\Users\\son\\Desktop\\lisa\\src\\App.js":"2","C:\\Users\\son\\Desktop\\lisa\\src\\redux\\store.js":"3","C:\\Users\\son\\Desktop\\lisa\\src\\socket.js":"4","C:\\Users\\son\\Desktop\\lisa\\src\\components\\Chat.js":"5","C:\\Users\\son\\Desktop\\lisa\\src\\redux\\ducks\\reducer.js":"6","C:\\Users\\son\\Desktop\\lisa\\src\\components\\Friend.js":"7","C:\\Users\\son\\Desktop\\lisa\\src\\components\\Room.js":"8","C:\\Users\\son\\Desktop\\lisa\\src\\components\\FriendList.js":"9","C:\\Users\\son\\Desktop\\lisa\\src\\redux\\ducks\\friend.js":"10","C:\\Users\\son\\Desktop\\lisa\\src\\redux\\ducks\\message.js":"11","C:\\Users\\son\\Desktop\\lisa\\src\\redux\\ducks\\inbox.js":"12","C:\\Users\\son\\Desktop\\lisa\\src\\components\\InboxList.js":"13","C:\\Users\\son\\Desktop\\lisa\\src\\components\\Inbox.js":"14"},{"size":505,"mtime":1617637708966,"results":"15","hashOfConfig":"16"},{"size":1438,"mtime":1617652771676,"results":"17","hashOfConfig":"16"},{"size":459,"mtime":1617645547079,"results":"18","hashOfConfig":"16"},{"size":200,"mtime":1617637708966,"results":"19","hashOfConfig":"16"},{"size":7303,"mtime":1617652789789,"results":"20","hashOfConfig":"16"},{"size":1758,"mtime":1617640919606,"results":"21","hashOfConfig":"16"},{"size":1162,"mtime":1617643019397,"results":"22","hashOfConfig":"16"},{"size":1198,"mtime":1617652085103,"results":"23","hashOfConfig":"16"},{"size":5723,"mtime":1617651891070,"results":"24","hashOfConfig":"16"},{"size":636,"mtime":1617641016869,"results":"25","hashOfConfig":"16"},{"size":651,"mtime":1617642593722,"results":"26","hashOfConfig":"16"},{"size":383,"mtime":1617645501656,"results":"27","hashOfConfig":"16"},{"size":2147,"mtime":1617648642977,"results":"28","hashOfConfig":"16"},{"size":1174,"mtime":1617651696433,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"tlshm6",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"32"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},"C:\\Users\\son\\Desktop\\lisa\\src\\index.js",[],["70","71"],"C:\\Users\\son\\Desktop\\lisa\\src\\App.js",["72","73"],"import React, { useEffect } from 'react';\r\nimport { Grid, Button, Box } from '@material-ui/core';\r\nimport InboxList from './components/InboxList';\r\nimport Chat from './components/Chat';\r\nimport FriendList from './components/FriendList';\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport { ArrowForward, Message } from '@material-ui/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setUser } from './redux/ducks/reducer'\r\n\r\nimport socket from './socket';\r\n\r\nexport default function App() {\r\n  const { user, isAuthenticated, loginWithRedirect } = useAuth0()\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  useEffect(() => {\r\n    if (user && isAuthenticated) {\r\n      socket.emit('user', user)\r\n      dispatch(setUser(user))\r\n    }\r\n  }, [user, isAuthenticated])\r\n\r\n\r\n  const handleLogin = () => {\r\n    loginWithRedirect()\r\n  }\r\n\r\n  return (\r\n    <Box >\r\n      {\r\n        isAuthenticated && user ?\r\n          <Grid container spacing={2} >\r\n            <InboxList user={user} />\r\n            <Chat user={user} />\r\n            <FriendList user={user} />\r\n            <audio className=\"audio-element\">\r\n              <source src=\"./sound.mp3\"></source>\r\n            </audio>\r\n          </Grid >\r\n          :\r\n          <Button\r\n            onClick={handleLogin}\r\n            variant='contained'\r\n            color='primary'\r\n            endIcon={<ArrowForward />}\r\n          > Login\r\n          </Button>\r\n      }\r\n    </Box>\r\n  );\r\n}","C:\\Users\\son\\Desktop\\lisa\\src\\redux\\store.js",[],"C:\\Users\\son\\Desktop\\lisa\\src\\socket.js",[],"C:\\Users\\son\\Desktop\\lisa\\src\\components\\Chat.js",["74","75","76","77"],"import { useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  AppBar, Avatar, Button, Grid, IconButton,\r\n  TextField, Toolbar, Typography, Box\r\n} from '@material-ui/core'\r\nimport { Close, Send, Reorder } from '@material-ui/icons';\r\nimport React from 'react'\r\nimport socket from '../socket'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport message, { setMessageList, setNewMessage } from '../redux/ducks/message'\r\nimport { setRoom } from '../redux/ducks/reducer';\r\nimport { AvatarGroup } from '@material-ui/lab';\r\n\r\n// Icon\r\n// Button\r\nconst useStyles = makeStyles((theme) => ({\r\n  closeButton: {\r\n    color: 'white',\r\n  },\r\n  chat: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-between',\r\n    background: 'whitesmoke',\r\n    height: '750px',\r\n  },\r\n  title: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n  roomName: {\r\n    marginLeft: '10px',\r\n  },\r\n\r\n  messagesContainer: {\r\n    marginTop: '10px',\r\n    // background: 'yellow',\r\n    // flex: 1,\r\n    height: '100%',\r\n    overflowY: 'scroll',\r\n  },\r\n  sendMessage: {\r\n    display: 'flex',\r\n  },\r\n  input: {\r\n    width: '100%',\r\n    marginRight: '5px',\r\n  },\r\n\r\n\r\n  myMessage: {\r\n    // margin: 'right',\r\n    // background: 'blue',\r\n    // width: '75%',\r\n    // color: '#33eaff',\r\n    display: 'flex',\r\n    flexDirection: 'row-reverse',\r\n    alignItems: 'center',\r\n    marginBottom: '20px',\r\n    marginLeft: '10px',\r\n    marginRight: '10px',\r\n  },\r\n\r\n  theirMessage: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginBottom: '20px',\r\n    marginLeft: '10px',\r\n    marginRight: '10px',\r\n  },\r\n\r\n  messageContent: {\r\n    width: '65%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    margin: '0px 10px',\r\n  },\r\n  messageBar: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    padding: '0px 20px'\r\n  },\r\n  messageName: {\r\n    fontSize: '14px',\r\n    opacity: 0.8,\r\n  },\r\n  messageTime: {\r\n    opacity: 0.6,\r\n    fontSize: '12px',\r\n    // fontSize: '12px',\r\n    // textAlign: 'center'\r\n  },\r\n  messageText: {\r\n    background: '#33eaff',\r\n    padding: '15px',\r\n  },\r\n\r\n}))\r\n// TextField\r\nfunction Chat(props) {\r\n  const { user } = props\r\n  const room = useSelector(state => state.reducer.room)\r\n  const messageList = useSelector(state => state.messageReducer.messageList)\r\n  const newMessage = useSelector(state => state.messageReducer.newMessage)\r\n\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles()\r\n  const [text, setText] = useState('')\r\n\r\n  const [roomName, setRoomName] = useState('') // If 1 vs 1 name of clicked friend\r\n\r\n  useEffect(() => {\r\n    // by: user,\r\n    // name: [user.nickname, friend.nickname].sort().join(' and '),\r\n    // memberNames: [user.name, friend.name],\r\n    // memberPictures : [user.picture, friend.picture]\r\n    if (room) {\r\n      socket.emit('room', { room, nickname: user.nickname }) // Join user to this room???\r\n      if (room.memberNames.length < 3)\r\n        setRoomName(room.memberNames.find(name => name !== user.name))\r\n      else\r\n        setRoomName(room.name)\r\n    }\r\n  }, [room])\r\n\r\n  useEffect(() => {\r\n    socket.on('message list', messageList => dispatch(setMessageList(messageList)))\r\n    socket.on('message', message => {\r\n      const audioEl = document.getElementsByClassName(\"audio-element\")[0]\r\n      audioEl.play()\r\n      dispatch(setNewMessage(message))\r\n    })\r\n  }, [socket])\r\n\r\n  useEffect(() => {\r\n    if (newMessage && room && newMessage.roomName === room.name) {\r\n      dispatch(setMessageList([...messageList, newMessage]))\r\n      scroll()\r\n    }\r\n  }, [newMessage])\r\n\r\n  // handleSendMessage\r\n  const handleSendMessage = e => {\r\n    e.preventDefault()\r\n    let message = {\r\n      by: user,\r\n      text,\r\n      roomName: room.name,\r\n    }\r\n    // console.log(message)\r\n    socket.emit('message', message)\r\n    setText('')\r\n  }\r\n\r\n\r\n\r\n  const handleCloseChat = () => dispatch(setRoom(null))\r\n\r\n\r\n\r\n  function scroll() {\r\n    let scrollDiv = document.getElementById('scroll')\r\n    if (scrollDiv) {\r\n      scrollDiv.addEventListener('DOMNodeInserted', event => {\r\n        const { currentTarget: target } = event;\r\n        target.scroll({ top: target.scrollHeight, behavior: 'smooth' });\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <Grid className={classes.chat} item xs={12} sm={8} md={6} lg={6}>\r\n      {\r\n        room &&\r\n        <>\r\n          <AppBar position=\"static\">\r\n            <Toolbar\r\n              className={classes.title}\r\n              variant=\"dense\"\r\n            >\r\n              <AvatarGroup>\r\n                {room.memberPictures.map(pic => <Avatar src={pic} />)}\r\n              </AvatarGroup>\r\n\r\n              <Typography\r\n                className={classes.roomName}\r\n                variant=\"h6\" color=\"inherit\">\r\n                {roomName}\r\n              </Typography>\r\n              <IconButton>\r\n                <Reorder className={classes.closeButton} fontSize='large' />\r\n              </IconButton>\r\n              <IconButton onClick={handleCloseChat}>\r\n                <Close className={classes.closeButton} fontSize='large' />\r\n              </IconButton>\r\n            </Toolbar>\r\n          </AppBar>\r\n          {/* messages */}\r\n          <Box id='scroll' className={classes.messagesContainer}>\r\n            {\r\n              messageList.map(message => {\r\n                return (\r\n                  <Box\r\n                    key={message._id}\r\n                    className={user.nickname !== message.by.nickname ? classes.theirMessage : classes.myMessage}\r\n                  >\r\n                    <Avatar\r\n                      src={message.by.picture}\r\n                      className={classes.messageAvatar} />\r\n                    <Box className={classes.messageContent}>\r\n                      <Box className={classes.messageBar}>\r\n                        <Typography className={classes.messageName}>{message.by.name}</Typography>\r\n                        <Typography className={classes.messageTime}>{new Date(message.createdAt).toDateString()}</Typography>\r\n                      </Box>\r\n                      <Typography className={classes.messageText}\r\n                        style={{ background: user.email === message.by.email && 'lightgray' }}\r\n                      >\r\n                        {message.text}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n                )\r\n              })\r\n            }\r\n\r\n          </Box>\r\n\r\n          <form\r\n            className={classes.sendMessage}\r\n            onSubmit={handleSendMessage}>\r\n            <TextField\r\n              className={classes.input}\r\n              id=\"outlined\"\r\n              label=\"Your message\"\r\n              // defaultValue=\"Default Value\"\r\n              variant=\"outlined\"\r\n              value={text}\r\n              onChange={e => setText(e.target.value)}\r\n            />\r\n            <Button\r\n              type='submit'\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              endIcon={<Send />}\r\n              style={{ borderRadius: 0 }}\r\n            >\r\n              Send\r\n            </Button>\r\n          </form>\r\n        </>\r\n      }\r\n\r\n    </Grid >\r\n  )\r\n}\r\n\r\nexport default Chat\r\n","C:\\Users\\son\\Desktop\\lisa\\src\\redux\\ducks\\reducer.js",["78"],"const SET_USER = 'reducer/setUser'\r\nconst SET_MESSAGES = 'reducer/setMessages'\r\nconst SET_NEW_MESSAGE = 'reducer/setNewMessage'\r\nconst SET_TARGET = 'reducer/setTarget'\r\nconst SET_ROOM = 'reducer/setRoom'\r\nconst SET_INBOXS = 'reducer/setInboxs'\r\nconst SET_ROOMS = 'reducer/setRooms'\r\n\r\n// 1\r\nexport const setUser = user => ({\r\n  type: SET_USER,\r\n  value: user\r\n})\r\n\r\n\r\n// 4\r\nexport const setRoom = room => ({\r\n  // Room is an object\r\n  type: SET_ROOM,\r\n  value: room\r\n})\r\n\r\n// 5\r\nexport const setTarget = target => ({\r\n  type: SET_TARGET,\r\n  value: target\r\n})\r\n\r\n// 6\r\nexport const setNewMessage = newMessage => ({\r\n  type: SET_NEW_MESSAGE,\r\n  value: newMessage\r\n})\r\n\r\n// 7\r\nexport const setMessages = messages => ({\r\n  type: SET_MESSAGES,\r\n  value: messages\r\n})\r\n\r\n// 8\r\nexport const setInboxs = inboxs => ({\r\n  type: SET_INBOXS,\r\n  value: inboxs\r\n})\r\n\r\n// 4\r\nexport const setRooms = rooms => ({\r\n  // Room is an object\r\n  type: SET_ROOMS,\r\n  value: rooms\r\n})\r\n\r\nconst initState = {\r\n  user: null,\r\n  friendList: [],\r\n  newFriend: null,\r\n  room: null,\r\n  target: null,\r\n  newMessages: null,\r\n  messages: [],\r\n  inboxs: [],\r\n  rooms: [],\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_USER:\r\n      return { ...state, user: action.value }\r\n    case SET_ROOM:\r\n      return { ...state, room: action.value }\r\n    case SET_TARGET:\r\n      return { ...state, target: action.value }\r\n    case SET_NEW_MESSAGE:\r\n      return { ...state, newMessage: action.value }\r\n    case SET_MESSAGES:\r\n      return { ...state, messages: action.value }\r\n    case SET_INBOXS:\r\n      return { ...state, inboxs: action.value }\r\n    case SET_ROOMS:\r\n      return { ...state, rooms: action.value }\r\n    default:\r\n      return state\r\n  }\r\n}","C:\\Users\\son\\Desktop\\lisa\\src\\components\\Friend.js",["79","80"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography, ListItem, Avatar } from '@material-ui/core'\r\nimport { Drafts } from '@material-ui/icons';\r\nimport { setRoom } from '../redux/ducks/reducer'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport socket from '../socket';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  friends: {\r\n    height: '750px',\r\n  },\r\n  username: {\r\n    marginLeft: '10px',\r\n  },\r\n}));\r\n\r\n\r\nexport default function Friend(props) {\r\n  const { friend } = props\r\n  const user = useSelector(state => state.reducer.user)\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles()\r\n\r\n\r\n  const handleClick = () => {\r\n    let room = {\r\n      by: user,\r\n      name: [user.nickname, friend.nickname].sort().join(' and '),\r\n      memberNames: [user.name, friend.name],\r\n      memberPictures : [user.picture, friend.picture]\r\n    }\r\n\r\n    dispatch(setRoom(room)) // here \r\n  }\r\n\r\n  return (\r\n    <ListItem button onClick={handleClick}>\r\n      <Avatar src={friend.picture} />\r\n      <Typography className={classes.username} >{friend.name}</Typography>\r\n    </ListItem>\r\n  )\r\n}\r\n\r\n","C:\\Users\\son\\Desktop\\lisa\\src\\components\\Room.js",["81","82","83"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography, ListItem, Avatar } from '@material-ui/core'\r\nimport { Drafts } from '@material-ui/icons';\r\nimport { setRoom } from '../redux/ducks/reducer'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport socket from '../socket';\r\nimport { AvatarGroup } from '@material-ui/lab';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  room: {\r\n    // background: 'orange',\r\n    height: '750px',\r\n  },\r\n  username: {\r\n    marginLeft: '10px',\r\n  },\r\n  avatar: {\r\n    border: '2px solid black'\r\n  }\r\n}));\r\n\r\n\r\nexport default function Room(props) {\r\n  const { room } = props\r\n  const user = useSelector(state => state.reducer.user)\r\n  // useSelector\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles()\r\n\r\n\r\n  const handleClick = () => {\r\n    dispatch(setRoom(room))\r\n  }\r\n\r\n  return (\r\n    <ListItem button onClick={handleClick}>\r\n      <AvatarGroup>\r\n        {\r\n          room.memberPictures.map(pic => <Avatar className={classes.avatar} src={pic} />)\r\n        }\r\n\r\n      </AvatarGroup>\r\n\r\n      <Typography className={classes.username} >{room.name}</Typography>\r\n    </ListItem>\r\n  )\r\n}\r\n\r\n","C:\\Users\\son\\Desktop\\lisa\\src\\components\\FriendList.js",["84","85","86","87","88","89","90","91","92","93"],"import React, { useEffect, useState } from 'react'\r\nimport { TextField, AppBar, Button, Fab, Grid, List, ListItem, ListItemIcon, ListItemText, Modal, Toolbar, Typography, Avatar, Checkbox, Paper } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Send, Drafts, Inbox, Add, PeopleAltOutlined, ExitToApp, SettingsSystemDaydream } from '@material-ui/icons';\r\nimport Friend from './Friend'\r\nimport Room from './Room'\r\nimport { useAuth0 } from '@auth0/auth0-react';\r\nimport socket from '../socket';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setRoom, setRooms } from '../redux/ducks/reducer'\r\nimport friend, { setFriendList, setNewFriend } from '../redux/ducks/friend'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  bar: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n  friends: {\r\n    // background: 'orange',\r\n    height: '750px',\r\n    position: 'relative',\r\n  },\r\n\r\n  create: {\r\n    position: 'absolute',\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(2),\r\n  },\r\n  createChatRoom: {\r\n    background: 'white',\r\n    // marginTop: '40%',  \r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    padding: '20px',\r\n  }\r\n}));\r\n\r\n\r\nexport default function FriendList(props) {\r\n  const { logout } = useAuth0()\r\n  const classes = useStyles()\r\n  // const user = useSelector(state => state.reducer.user)\r\n  const { user } = props\r\n  const friendList = useSelector(state => state.friendReducer.friendList)\r\n  const newFriend = useSelector(state => state.friendReducer.newFriend)\r\n  const rooms = useSelector(state => state.reducer.rooms)\r\n  const [nameList, setNameList] = useState([])\r\n  const [pictureList, setPictureList] = useState([])\r\n  const [open, setOpen] = useState(false)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    socket.on('user list', userList => dispatch(setFriendList(userList)))\r\n    socket.on('new user', user => { // G\r\n      dispatch(setNewFriend(user))\r\n    })\r\n\r\n    socket.on('room list', rooms => {\r\n      rooms = rooms.filter(r => {\r\n        return r.memberNames.length > 2 && r.name.includes(user.nickname)\r\n      })\r\n\r\n      dispatch(setRooms(rooms))\r\n    })\r\n\r\n  }, [socket])\r\n\r\n  // Append new friend to friend list\r\n  useEffect(() => {\r\n    if (newFriend) dispatch(setFriendList([...friendList, newFriend]))\r\n  }, [newFriend])\r\n\r\n\r\n  const handleLogout = () => {\r\n    logout({\r\n      returnTo: window.location.origin\r\n    })\r\n  }\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCheck = (e) => {\r\n    let { value } = e.target\r\n    let [nickname, picture] = value.split('@@@')\r\n    // alert(nickname)\r\n    if (e.target.checked) {\r\n      setNameList([...nameList, nickname])\r\n      setPictureList([...pictureList, picture])\r\n    }\r\n\r\n    else {\r\n      let cloneName = [...nameList]\r\n      let clonePicture = [...pictureList]\r\n\r\n      cloneName = cloneName.filter(n => n !== nickname)\r\n      clonePicture = clonePicture.filter(p => p !== picture)\r\n      setNameList(cloneName)\r\n      setPictureList(clonePicture)\r\n    }\r\n  }\r\n\r\n\r\n  const handleCreateGroupChat = () => {\r\n    if (nameList.length <= 0)\r\n      return\r\n\r\n    let cloneName = [...nameList, user.nickname]\r\n    let clonePicture = [...pictureList, user.picture]\r\n\r\n    let room = {\r\n      by: user,\r\n      memberNames: cloneName,\r\n      memberPictures: clonePicture,\r\n      name: cloneName.sort().join(' and ')\r\n    }\r\n\r\n    dispatch(setRoom(room))\r\n    setNameList([])\r\n    setPictureList([])\r\n\r\n    // let room = {\r\n    //   by: user,\r\n    //   name: [user.nickname, friend.nickname].sort().join(' and '),\r\n    //   memberNames: [user.name, friend.name],\r\n    //   memberPictures: [user.picture, friend.picture]\r\n    // }\r\n\r\n    // dispatch(setRoom(room)) // here \r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <Grid className={classes.friends} item xs sm={12} md={3}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar\r\n          className={classes.bar}\r\n          variant=\"dense\">\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            Friends\r\n          </Typography>\r\n          <Button\r\n            onClick={handleLogout}\r\n            variant='contained'\r\n            color='secondary'\r\n            endIcon={<ExitToApp />}\r\n          >\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n        {\r\n          friendList.map((friend, i) => {\r\n            return <Friend friend={friend} key={i} />\r\n          })\r\n        }\r\n        <hr />\r\n        <Typography> Groupchat: </Typography>\r\n        {\r\n          rooms.map((room, i) => {\r\n            return <Room room={room} key={i} />\r\n          })\r\n        }\r\n      </List>\r\n      <Fab\r\n        onClick={handleOpen}\r\n\r\n        variant='extended' className={classes.create} color=\"primary\" aria-label=\"add\">\r\n        <Add />\r\n        <Typography>Groupchat</Typography>\r\n        <PeopleAltOutlined />\r\n      </Fab>\r\n\r\n      <Modal open={open} onClose={handleClose}>\r\n        <Paper>\r\n          <List>\r\n            {\r\n              friendList.map(friend => {\r\n                return (\r\n                  <ListItem >\r\n                    <Avatar src={friend.picture} />\r\n                    <Typography>{friend.nickname}</Typography>\r\n                    <Checkbox onChange={handleCheck} value={friend.nickname + \"@@@\" + friend.picture} />\r\n                  </ListItem>\r\n                )\r\n              })\r\n            }\r\n\r\n\r\n          </List>\r\n          <Button onClick={handleCreateGroupChat} variant='outlined'>create</Button>\r\n        </Paper>\r\n\r\n\r\n\r\n      </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </Grid>\r\n  )\r\n}\r\n","C:\\Users\\son\\Desktop\\lisa\\src\\redux\\ducks\\friend.js",["94"],"const SET_FRIEND_LIST = 'friend/setFriendList'\r\nconst SET_NEW_FRIEND = 'friend/setNewFriend'\r\n\r\nexport const setFriendList = friendList => ({\r\n  type: SET_FRIEND_LIST,\r\n  value: friendList\r\n})\r\n\r\n\r\nexport const setNewFriend = newFriend => ({\r\n  type: SET_NEW_FRIEND,\r\n  value: newFriend\r\n})\r\n\r\n\r\nconst initState = {\r\n  friendList: [],\r\n  newFriend: null,\r\n}\r\n\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_FRIEND_LIST:\r\n      return { ...state, friendList: action.value }\r\n    case SET_NEW_FRIEND:\r\n      return { ...state, newFriend: action.value }\r\n    default:\r\n      return state\r\n  }\r\n}","C:\\Users\\son\\Desktop\\lisa\\src\\redux\\ducks\\message.js",["95"],"\r\nconst SET_MESSAGE_LIST = 'message/setMessageList'\r\nconst SET_NEW_MESSAGE = 'message/setNewMessage'\r\n\r\nexport const setNewMessage = newMessage => ({\r\n  type: SET_NEW_MESSAGE,\r\n  value: newMessage\r\n})\r\n\r\nexport const setMessageList = messageList => ({\r\n  type: SET_MESSAGE_LIST,\r\n  value: messageList\r\n})\r\n\r\nconst initState = {\r\n  newMessage: null,\r\n  messageList: []\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_MESSAGE_LIST:\r\n      return { ...state, messageList: action.value }\r\n    case SET_NEW_MESSAGE:\r\n      return { ...state, newMessage: action.value }\r\n    default:\r\n      return state\r\n  }\r\n}","C:\\Users\\son\\Desktop\\lisa\\src\\redux\\ducks\\inbox.js",["96"],"const SET_INBOX_LIST = 'inbox/setInboxList'\r\n\r\n\r\nexport const setInboxList = inboxList => ({\r\n  type: SET_INBOX_LIST,\r\n  value: inboxList\r\n})\r\n\r\nconst initState = {\r\n  inboxList: []\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_INBOX_LIST:\r\n      return { ...state, inboxList: action.value }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}","C:\\Users\\son\\Desktop\\lisa\\src\\components\\InboxList.js",["97","98","99","100","101","102","103","104","105"],"import React, { useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Avatar, Container, Divider, Grid, List, ListItem, ListItemAvatar, ListItemIcon, ListItemText, Toolbar, Typography } from '@material-ui/core'\r\nimport Inbox from './Inbox';\r\nimport socket from '../socket';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setInboxList } from '../redux/ducks/inbox'\r\n// ListItemAvatar\r\n// Divider\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  messages: {\r\n    background: 'white',\r\n    height: '750px',\r\n    marginBottom: '10px',\r\n  },\r\n  title: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n  avatar: {\r\n\r\n  },\r\n  userName: {\r\n    marginLeft: '10px',\r\n  },\r\n  messagesContainer: {\r\n    height: '670px',\r\n    overflowY: 'scroll',\r\n  },\r\n\r\n}));\r\n\r\nexport default function InboxList(props) {\r\n  const { user } = props\r\n  const inboxList = useSelector(state => state.inboxReducer.inboxList)\r\n  const newMessage = useSelector(state => state.messageReducer.newMessage)\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles()\r\n\r\n  useEffect(() => {\r\n    if (newMessage)\r\n      dispatch(setInboxList([newMessage, ...inboxList.filter(m => m.roomName !== newMessage.roomName)]))\r\n\r\n  }, [newMessage])\r\n\r\n\r\n  return (\r\n    <Grid className={classes.messages} item xs sm={4} md={3}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={classes.title} variant=\"dense\">\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            Inboxs\r\n          </Typography>\r\n          <Toolbar>\r\n            <Avatar className={classes.avatar} src={user.picture} />\r\n            <Typography className={classes.userName} variant=\"h6\" color=\"inherit\">\r\n              {user.name}\r\n            </Typography>\r\n          </Toolbar>\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <List className={classes.messagesContainer}>\r\n        {\r\n          inboxList.map((message) => {\r\n            return (\r\n              <Inbox key={message._id} message={message} user={user} />\r\n            )\r\n          })\r\n        }\r\n\r\n      </List>\r\n    </Grid>\r\n\r\n  )\r\n}\r\n\r\n\r\n","C:\\Users\\son\\Desktop\\lisa\\src\\components\\Inbox.js",["106","107","108","109","110","111","112","113","114","115","116"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Avatar, Divider, Grid, List, ListItem, ListItemAvatar, ListItemIcon, ListItemText, Toolbar, Typography } from '@material-ui/core'\r\nimport { setRoom } from '../redux/ducks/reducer'\r\nimport { useDispatch } from 'react-redux';\r\nimport socket from '../socket';\r\nimport { useState, useEffect } from 'react';\r\nimport { AvatarGroup } from '@material-ui/lab';\r\nexport default function Inbox(props) {\r\n  const { message, user } = props\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  useEffect(() => {\r\n    socket.on('room', room => dispatch(setRoom(room)))\r\n  }, [socket])\r\n\r\n\r\n  const handleClick = () => {\r\n    socket.emit('get room', message.roomName)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ListItem\r\n        onClick={handleClick}\r\n        button\r\n        alignItems=\"flex-start\">\r\n        <AvatarGroup>\r\n          <Avatar src={message.by.picture} alt=\"Travis Howard\" />\r\n        </AvatarGroup>\r\n        <ListItemText\r\n          primary={message.by.name}\r\n          secondary={message.text}\r\n        />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n    </>\r\n  )\r\n}\r\n",{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":7,"column":24,"nodeType":"123","messageId":"124","endLine":7,"endColumn":31},{"ruleId":"125","severity":1,"message":"126","line":23,"column":6,"nodeType":"127","endLine":23,"endColumn":29,"suggestions":"128"},{"ruleId":"121","severity":1,"message":"129","line":11,"column":8,"nodeType":"123","messageId":"124","endLine":11,"endColumn":15},{"ruleId":"125","severity":1,"message":"130","line":127,"column":6,"nodeType":"127","endLine":127,"endColumn":12,"suggestions":"131"},{"ruleId":"125","severity":1,"message":"132","line":136,"column":6,"nodeType":"127","endLine":136,"endColumn":14,"suggestions":"133"},{"ruleId":"125","severity":1,"message":"134","line":143,"column":6,"nodeType":"127","endLine":143,"endColumn":18,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":66,"column":1,"nodeType":"138","endLine":85,"endColumn":2},{"ruleId":"121","severity":1,"message":"139","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":16},{"ruleId":"121","severity":1,"message":"140","line":7,"column":8,"nodeType":"123","messageId":"124","endLine":7,"endColumn":14},{"ruleId":"121","severity":1,"message":"139","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":16},{"ruleId":"121","severity":1,"message":"140","line":7,"column":8,"nodeType":"123","messageId":"124","endLine":7,"endColumn":14},{"ruleId":"121","severity":1,"message":"141","line":26,"column":9,"nodeType":"123","messageId":"124","endLine":26,"endColumn":13},{"ruleId":"121","severity":1,"message":"142","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":19},{"ruleId":"121","severity":1,"message":"143","line":2,"column":64,"nodeType":"123","messageId":"124","endLine":2,"endColumn":76},{"ruleId":"121","severity":1,"message":"144","line":2,"column":78,"nodeType":"123","messageId":"124","endLine":2,"endColumn":90},{"ruleId":"121","severity":1,"message":"145","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":14},{"ruleId":"121","severity":1,"message":"139","line":4,"column":16,"nodeType":"123","messageId":"124","endLine":4,"endColumn":22},{"ruleId":"121","severity":1,"message":"146","line":4,"column":24,"nodeType":"123","messageId":"124","endLine":4,"endColumn":29},{"ruleId":"121","severity":1,"message":"147","line":4,"column":66,"nodeType":"123","messageId":"124","endLine":4,"endColumn":88},{"ruleId":"121","severity":1,"message":"148","line":11,"column":8,"nodeType":"123","messageId":"124","endLine":11,"endColumn":14},{"ruleId":"125","severity":1,"message":"149","line":68,"column":6,"nodeType":"127","endLine":68,"endColumn":14,"suggestions":"150"},{"ruleId":"125","severity":1,"message":"151","line":73,"column":6,"nodeType":"127","endLine":73,"endColumn":17,"suggestions":"152"},{"ruleId":"136","severity":1,"message":"137","line":22,"column":1,"nodeType":"138","endLine":31,"endColumn":2},{"ruleId":"136","severity":1,"message":"137","line":20,"column":1,"nodeType":"138","endLine":29,"endColumn":2},{"ruleId":"136","severity":1,"message":"137","line":13,"column":1,"nodeType":"138","endLine":21,"endColumn":2},{"ruleId":"121","severity":1,"message":"153","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"154","line":3,"column":26,"nodeType":"123","messageId":"124","endLine":3,"endColumn":35},{"ruleId":"121","severity":1,"message":"155","line":3,"column":37,"nodeType":"123","messageId":"124","endLine":3,"endColumn":44},{"ruleId":"121","severity":1,"message":"156","line":3,"column":58,"nodeType":"123","messageId":"124","endLine":3,"endColumn":66},{"ruleId":"121","severity":1,"message":"157","line":3,"column":68,"nodeType":"123","messageId":"124","endLine":3,"endColumn":82},{"ruleId":"121","severity":1,"message":"143","line":3,"column":84,"nodeType":"123","messageId":"124","endLine":3,"endColumn":96},{"ruleId":"121","severity":1,"message":"144","line":3,"column":98,"nodeType":"123","messageId":"124","endLine":3,"endColumn":110},{"ruleId":"121","severity":1,"message":"140","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":14},{"ruleId":"125","severity":1,"message":"158","line":46,"column":6,"nodeType":"127","endLine":46,"endColumn":18,"suggestions":"159"},{"ruleId":"121","severity":1,"message":"160","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":20},{"ruleId":"121","severity":1,"message":"161","line":3,"column":10,"nodeType":"123","messageId":"124","endLine":3,"endColumn":16},{"ruleId":"121","severity":1,"message":"162","line":3,"column":35,"nodeType":"123","messageId":"124","endLine":3,"endColumn":39},{"ruleId":"121","severity":1,"message":"163","line":3,"column":41,"nodeType":"123","messageId":"124","endLine":3,"endColumn":45},{"ruleId":"121","severity":1,"message":"157","line":3,"column":57,"nodeType":"123","messageId":"124","endLine":3,"endColumn":71},{"ruleId":"121","severity":1,"message":"143","line":3,"column":73,"nodeType":"123","messageId":"124","endLine":3,"endColumn":85},{"ruleId":"121","severity":1,"message":"164","line":3,"column":101,"nodeType":"123","messageId":"124","endLine":3,"endColumn":108},{"ruleId":"121","severity":1,"message":"165","line":3,"column":110,"nodeType":"123","messageId":"124","endLine":3,"endColumn":120},{"ruleId":"121","severity":1,"message":"153","line":7,"column":10,"nodeType":"123","messageId":"124","endLine":7,"endColumn":18},{"ruleId":"121","severity":1,"message":"141","line":10,"column":20,"nodeType":"123","messageId":"124","endLine":10,"endColumn":24},{"ruleId":"125","severity":1,"message":"132","line":16,"column":6,"nodeType":"127","endLine":16,"endColumn":14,"suggestions":"166"},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'Message' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["169"],"'message' is defined but never used.","React Hook useEffect has missing dependencies: 'user.name' and 'user.nickname'. Either include them or remove the dependency array.",["170"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.",["171"],"React Hook useEffect has missing dependencies: 'dispatch', 'messageList', and 'room'. Either include them or remove the dependency array.",["172"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Drafts' is defined but never used.","'socket' is defined but never used.","'user' is assigned a value but never used.","'TextField' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Send' is defined but never used.","'Inbox' is defined but never used.","'SettingsSystemDaydream' is defined but never used.","'friend' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'user.nickname'. Either include them or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.",["173"],"React Hook useEffect has missing dependencies: 'dispatch' and 'friendList'. Either include them or remove the dependency array.",["174"],"'useState' is defined but never used.","'Container' is defined but never used.","'Divider' is defined but never used.","'ListItem' is defined but never used.","'ListItemAvatar' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'inboxList'. Either include them or remove the dependency array.",["175"],"'makeStyles' is defined but never used.","'AppBar' is defined but never used.","'Grid' is defined but never used.","'List' is defined but never used.","'Toolbar' is defined but never used.","'Typography' is defined but never used.",["176"],"no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"181","fix":"191"},"Update the dependencies array to be: [user, isAuthenticated, dispatch]",{"range":"192","text":"193"},"Update the dependencies array to be: [room, user.name, user.nickname]",{"range":"194","text":"195"},"Update the dependencies array to be: [dispatch]",{"range":"196","text":"197"},"Update the dependencies array to be: [dispatch, messageList, newMessage, room]",{"range":"198","text":"199"},"Update the dependencies array to be: [dispatch, user.nickname]",{"range":"200","text":"201"},"Update the dependencies array to be: [dispatch, friendList, newFriend]",{"range":"202","text":"203"},"Update the dependencies array to be: [dispatch, inboxList, newMessage]",{"range":"204","text":"205"},{"range":"206","text":"197"},[746,769],"[user, isAuthenticated, dispatch]",[3187,3193],"[room, user.name, user.nickname]",[3493,3501],"[dispatch]",[3685,3697],"[dispatch, messageList, newMessage, room]",[2203,2211],"[dispatch, user.nickname]",[2353,2364],"[dispatch, friendList, newFriend]",[1286,1298],"[dispatch, inboxList, newMessage]",[648,656]]